#!/usr/bin/env perl
#
# Plots solution or convergence.
#
# USAGE: plot <sol|conv>
#   sol:  plots solution.
#   conv: plots convergence.
#
# Reads the input file to determine which problem was
# just run and then plots the results of that run
# with gnuplot and then views the resulting plot with evince.

use strict;

# option to crop pdf
my $croppdf = 1;

# check for correct number of input arguments
if ($#ARGV != 0) {
   die "USAGE: plot <sol|conv>
   sol:  plots solution.
   conv: plots convergence.\n";
}

# search variables
my @search_strings = ("set Problem ID",
                      "set Time discretization",
                      "set SSPRK method",
                      "set Theta method");
my @values;
my @found_strings;
for (my $i = 0; $i <= $#search_strings; $i++) {
   push(@values,"");
   push(@found_strings,0);
}

# associate variables with indices in search arrays
my $problem_id_i = 0;
my $time_integrator_i = 1;
my $ssprk_method_i = 2;
my $theta_method_i = 3;

# read input file to determine the test problem ID and time integrator
my $input_file = "input";
open(IN, '<', $input_file) or die $!;
my $input_line; # input file line
my @input_line; # array of fields of input line
while ($input_line = <IN>) {
   &check_for_strings($input_line);
}

# check that all search strings were found
for (my $i = 0; $i < $#search_strings; $i++) {
   if (not $found_strings[$i]) {
      die "Search string \"$search_strings[$i]\" could not be found in
           input file.\n";
   }
} 

# extract values
my $problem_ID = $values[$problem_id_i];
my $time_integrator = $values[$time_integrator_i];
my $ssprk_method = $values[$ssprk_method_i];
my $theta_method = $values[$theta_method_i];

# determine time integrator string based on time integrator option integer
my $time_integrator_string;
my @time_integrator_array = ("ss","theta","ssprk");
my %time_integrator_hash = map { $_ => 1 } @time_integrator_array;
if (exists($time_integrator_hash{$time_integrator}))
{
  if ($time_integrator eq "ss")
  {
    $time_integrator_string = "SS";#$time_disc_hash{$time_integrator}
  }
  elsif ($time_integrator eq "theta")
  {
    my %theta_method_hash = (
      FE => 'FE',
      CN => 'CN',
      BE => 'BE'
    );
    if (exists($theta_method_hash{$theta_method}))
    {
      $time_integrator_string = $theta_method_hash{$theta_method}
    }
    else
    {
      die "Invalid theta method: $theta_method\n";
    }
  }
  elsif ($time_integrator eq "ssprk")
  {
    my %ssprk_method_hash = (
      FE => 'FE',
      SSP2 => 'SSPRK22',
      SSP3 => 'SSPRK33'
    );
    if (exists($ssprk_method_hash{$ssprk_method}))
    {
      $time_integrator_string = $ssprk_method_hash{$ssprk_method}
    }
    else
    {
      die "Invalid ssprk method: $ssprk_method\n";
    }
  }
}
else
{
  die "Invalid time discretization: $time_integrator\n";
}


# determine if steady-state
my $is_ss;
if ($time_integrator_string eq "SS") {
   $is_ss = 1;
} else {
   $is_ss = 0;
}

# go to plotscripts directory
chdir "plotscripts";

# determine which plot to make
my $rootname;
if ($ARGV[0] eq "sol") {
   $rootname = "solutions";
} elsif ($ARGV[0] eq "conv") {
   $rootname = "convergence";
} else {
   die("Invalid command-line argument: must be \"sol\" or \"conv\"");
}

# call gnuplot
system("gnuplot -e \"problem_ID='$problem_ID';
   timeintegrator='$time_integrator_string';
   is_ss='$is_ss'\" $rootname.gp");
system("sleep 1");
   
# name of resulting plot file
my $output_file = "../plots/$rootname"."_$problem_ID"."_$time_integrator_string.pdf";

# crop pdf
if ($croppdf) {
   system("pdfcrop $output_file $output_file");
}

# view output
system("evince $output_file");

#================================================================================
sub check_for_strings() {
   # get command-line arguments
   my $line = $_[0];

   # split line
   chomp($line);
   my @line_fields = split /\s*=\s*/, $line;

   # loop over search strings
   for (my $i = 0; $i <= $#search_strings; $i++) {
      # check if lhs of field equals search string
      my $key = $line_fields[0]; $key =~ s/^\s*//;
      if ($key eq $search_strings[$i]) {
         # extract value and flag it as found
         my @fields = split /\s+/, $line_fields[1];
         $values[$i] = $fields[0];
         $found_strings[$i] = 1;
      }
   }
}
