#!/usr/bin/env perl
#
# Plots solution or convergence.
#
# USAGE: plot_explicit <phys> <name> <disc> <type>
#   <phys> conservation law: burgers|euler|shallowwater|transport
#   <name> name of problem (directory in ./output)
#   <disc> time discretization identifier: FE|SSP2|SSP3
#   <type> type of plot: sol|conv|visc

use strict;

# option to crop pdf
my $croppdf = 1;

# check for correct number of input arguments
if ($#ARGV != 3) {
   die "USAGE: plot_explicit <phys> <name> <disc> <type>
   <phys> conservation law: burgers|euler|shallowwater|transport
   <name> name of problem (directory in ./output)
   <disc> time discretization identifier: FE|SSP2|SSP3
   <type> type of plot: sol|conv|visc\n";
}

# get input arguments
my $conservation_law       = $ARGV[0];
my $problem_name           = $ARGV[1];
my $time_integrator_string = $ARGV[2];
my $plot_type              = $ARGV[3];

# determine if steady-state
my $is_ss;
if ($time_integrator_string eq "SS") {
   $is_ss = 1;
} else {
   $is_ss = 0;
}

# go to plotscripts directory
chdir "plotscripts";

# determine which plotscript to use
my $plotscript;
if ($plot_type eq "sol") {
   $plotscript = "solutions.gp";
} elsif ($plot_type eq "conv") {
   $plotscript = "convergence.gp";
} elsif ($plot_type eq "visc") {
   $plotscript = "viscosity.gp";
} else {
   die("Invalid command-line argument: must be \"sol\", \"conv\", or \"visc\"");
}

if ($plot_type eq "visc")
{
  # call gnuplot
  system("gnuplot -e \"problem_name='$problem_name';
     timeintegrator='$time_integrator_string'\" $plotscript");
  system("sleep 1");
     
  # name of resulting plot file
  my $output_file = "../output/$problem_name/viscosity".
     "_$time_integrator_string.pdf";
  
  # crop pdf
  if ($croppdf) {
     system("pdfcrop $output_file $output_file");
  }
  
  # view output
  system("evince $output_file");
}
else
{
  # determine the names of each component in solution
  my @quantity;
  my @column;
  if ($conservation_law eq "burgers")
  {
     @quantity = ("velocity");
     @column = (2);
  }
  elsif ($conservation_law eq "euler")
  {
     @quantity = ("density","momentum","energy");
     @column = (2,3,4);
  }
  elsif ($conservation_law eq "shallowwater")
  {
     #@quantity = ("height");
     #@quantity = ("height","momentum","waterlevel");
     @quantity = ("height","momentum");
     #@quantity = ("waterlevel");
     # columns are: 
     # 1: x
     # 2: height
     # 3: momentum
     # 4: bathymetry
     # 5: water level
     #@column = (2);
     #@column = (2,3,5);
     @column = (2,3);
     #@column = (5);
  }
  elsif ($conservation_law eq "transport")
  {
     @quantity = ("angularflux");
     @column = (2);
  }
  else
  {
     die("Invalid conservation law");
  }

  # error if convergence plot specified but not scalar
  my $n_components = @quantity;
  die "Convergence plots only programmed for scalar case.\n"
    if ($n_components != 1);
  
  # loop over components
  foreach my $i (0 .. $#quantity)
  {
     # call gnuplot
     system("gnuplot -e \"problem_name='$problem_name';
        timeintegrator='$time_integrator_string';
        is_ss='$is_ss';
        quantity='$quantity[$i]';
        column='$column[$i]'\" $plotscript");
     system("sleep 1");
        
     # name of resulting plot file
     my $output_file;
     if ($plot_type eq "conv") {
       $output_file = "../output/$problem_name/convergence_".
         "$time_integrator_string.pdf";
     } else {
       $output_file = "../output/$problem_name/$quantity[$i]".
         "_$time_integrator_string.pdf";
     }
     
     # crop pdf
     if ($croppdf) {
        system("pdfcrop $output_file $output_file");
     }
     
     # view output
     system("evince $output_file");
  }
}
