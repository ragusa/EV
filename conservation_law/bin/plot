#!/usr/bin/env perl
#
# Calls the plot_detailed plot script with command-line arguments inferred
# from the options in the appropriate input file.
#
# USAGE: $ plot [conservation law] [type]
#
#        OR
#
#        $ plot [type] [conservation law]
#
#        where
#          [conservation law]: burgers|euler|shallowwater|transport
#          [type]:             sol|conv|visc
#
#        If no conservation law is given, then the conservation law is
#        determined by the variable $default_conservation_law, set below.

use strict;

# default conservation law to be plotted (see USAGE)
my $default_conservation_law = "shallowwater";

# determine the conservation law; if not provided as a command-line argument,
# then use the default conservation law
my $n_arguments = @ARGV;
my $conservation_law;
my $type;

my %arg_identity = (
  "sol" => "type",
  "visc" => "type",
  "burgers" => "conservationlaw",
  "euler" => "conservationlaw",
  "shallowwater" => "conservationlaw",
  "transport" => "conservationlaw"
);

my $found_conservationlaw = 0;
my $found_type = 0;
for (my $i = 0; $i < $n_arguments; $i++)
{
  my $arg = $ARGV[$i];
  my $identity = $arg_identity{$arg};
  if ($identity eq "conservationlaw")
  {
    $conservation_law = $arg;
    $found_conservationlaw = 1;
  }
  elsif ($identity eq "type")
  {
    $type = $arg;
    $found_type = 1;
  }
  else
  {
    die "Invalid command-line argument."
  }
}

if (not $found_conservationlaw)
{
  $conservation_law = $default_conservation_law;
}

if (not $found_type)
{
  $type = "sol";
}

# read appropriate input file to find the necessary input parameters
#================================================================================

# declare values and flags
my $problem_name;
my $problem_name_found = 0;
my $temporal_discretization_class;
my $temporal_discretization_class_found = 0;
my $ssprk;
my $ssprk_found = 0;
my $theta;
my $theta_found = 0;

# function that checks for key and takes value if found
sub check_for_key
{
  my $line      = shift; # input line
  my $key       = shift; # key
  my $value     = shift; # value
  my $key_found = shift; # flag that key has been found

  # search for key
  if ($line =~ /set $key/)
  {
    my @fields1 = split /\s+=\s+/, $line;
    my @fields2 = split /\s+/, $fields1[1];
    $value = $fields2[0];
    $key_found = 1;
  }
  
  # return value and flag telling whether key has been found
  return ($value,$key_found)
}

# read input file to determine the test problem name and time integrator
open(IN, '<', "input/$conservation_law.prm") or die $!;
while (<IN>)
{
  # get line
  my $line = $_;

  # remove newline character from line
  chomp($line);

  # check for problem name field
  ($problem_name, $problem_name_found)
    = check_for_key($line,"problem name",$problem_name,$problem_name_found);

  # check for temporal discretization field
  ($temporal_discretization_class, $temporal_discretization_class_found)
    = check_for_key($line, "temporal discretization",
    $temporal_discretization_class, $temporal_discretization_class_found);

  # check for ssprk field
  ($ssprk, $ssprk_found)
    = check_for_key($line,"ssprk discretization",$ssprk,$ssprk_found);

  # check for theta field
  ($theta, $theta_found)
    = check_for_key($line,"theta discretization",$theta,$theta_found);

#  if ($line =~ /set problem name/)
#  {
#    my @fields = split /\s+=\s+/, $line;
#    my @fields2 = split /\s+/, $fields[1];
#    $problem_name = $fields2[0];
#    $problem_name_found = 1;
#  }
#
#  # check for time discretization field
#  if ($line =~ /set temporal discretization/)
#  {
#    my @fields = split /\s+=\s+/, $line;
#    my @fields2 = split /\s+/, $fields[1];
#    $time_discretization = $fields2[0];
#    $time_discretization_found = 1;
#  }
}

# check that problem name and temporal discretization class were found
if (not($problem_name_found and $temporal_discretization_class_found))
{
  die "Did not find both problem name and temporal discretization\n";
}

# determine temporal discretization
my $temporal_discretization;
if ($temporal_discretization_class eq "ss")
{
  $temporal_discretization = "SS";
}
elsif ($temporal_discretization_class eq "ssprk")
{
  if ($ssprk_found)
  {
    $temporal_discretization = $ssprk;
  }
  else
  {
    die "ssprk discretization not found\n";
  }
}
elsif ($temporal_discretization_class eq "theta")
{
  if ($theta_found)
  {
    $temporal_discretization = $theta;
  }
  else
  {
    die "theta discretization not found\n";
  }
}
else
{
  die "Invalid temporal discretization found\n";
}

# call plot script
my $function_call = "plot_explicit $conservation_law $problem_name ".
  "$temporal_discretization $type";
system($function_call);

