    case 2:
    { // void-to-absorber
      Assert(dim < 3, ExcNotImplemented());

      x_min = 0.0;
      x_max = 1.0;

      transport_direction[0] = 1.0;

      incoming_string = "1";
      function_parser_constants["incoming"] = 1.0;

      if (dim == 1) // 1-D
        cross_section_string = "if(x<x_mid, 0, sigma)";
      else if (dim == 2) // 2-D
        cross_section_string = "if(x>=x_mid, if(y>=x_mid, sigma, 0), 0)";
      else
        // 3-D
        cross_section_string = "if(x>=x_mid, if(y>=x_mid, if(z>=x_mid,"
                               "sigma, 0), 0), 0)";
      function_parser_constants["sigma"] = 100.0;

      source_time_dependent = false;
      source_string = "0";
      function_parser_constants["source"] = 0.0;

      exact_solution_option = ExactSolutionOption::parser;

      if (!is_time_dependent)
      {               // steady-state
        if (dim == 1) // 1-D
          exact_solution_string = "if(x>=x_mid,"
                                  "incoming*exp(-sigma*(x-x_mid)), incoming)";
        else if (dim == 2) // 2-D
          exact_solution_string =
            "if(x>=x_mid, if(y>=y_mid,"
            "incoming*exp(-sigma*(x-x_mid)), incoming), incoming)";
        else
          // 3-D
          exact_solution_string =
            "if(x>=x_mid, if(y>=y_mid, if(z>=x_mid,"
            "incoming*exp(-sigma*(x-x_mid)), incoming), incoming),"
            "incoming)";
      }
      else
      {               // transient
        if (dim == 1) // 1-D
          exact_solution_string = "if(x-t<x_min, if(x>=x_mid,"
                                  "incoming*exp(-sigma*(x-x_mid)), incoming), 0)";
        else if (dim == 2) // 2-D
          exact_solution_string =
            "if(x-t<x_min, if(x>=x_mid,"
            "if(y>=x_mid, incoming*exp(-sigma*(x-x_mid)), incoming),"
            "incoming), 0)";
        else
          // 3-D
          exact_solution_string =
            "if(x-t<x_min, if(x>=x_mid,"
            "if(y>=x_mid, if(z>=x_mid, incoming*exp(-sigma*(x-x_mid)),"
            "incoming), incoming), incoming), 0)";
      }
      initial_conditions_string = "0";
      break;
    }
