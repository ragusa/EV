/*!
\mainpage
\tableofcontents
  
<!----------------------------------------------------------------------------->
\section intro_sec Introduction
<!----------------------------------------------------------------------------->

This directory contains C++ code for solving conservation law systems of the form
\f[
  \partial_t\mathbf{u} + \nabla\cdot\mathbf{F}(\mathbf{u}) = \mathbf{0} ,
\f]
where \f$\mathbf{u}\f$ is a vector of conservation law variables, and
\f$\mathbf{F}(\mathbf{u})\f$ is a vector of conservation law fluxes.
Currently the following equations systems have been coded:
- Scalar transport of the form
\f[
  \partial_t u + \nabla\cdot\mathbf{v}u + \sigma u = q = 0 ,
\f]
where \f$\mathbf{v}\f$ is a constant velocity, \f$\sigma\f$ is a
reaction cross-section, and \f$q\f$ is an extraneous source.
- The Shallow water equations (SWE):
\f[
  \partial_t\left[\begin{array}{c}
    h\\
    h\mathbf{v}
    \end{array}\right]
  + \nabla\cdot\left[\begin{array}{c}
    h\mathbf{v}\\
    h\mathbf{v}\otimes\mathbf{v} + \frac{1}{2}gh^2
    \end{array}\right]
  = \left[\begin{array}{c}
    0\\
    -g h \nabla b
    \end{array}\right] ,
\f]
where \f$h\f$ is depth or height, \f$\mathbf{v}\f$ is velocity, \f$g\f$
is acceleration due to gravity, and \f$b\f$ is the bottom topography,
also known as *bathymetry*.

The inviscid Burger's equation and the inviscid Euler equations with ideal gas
EOS are also implemented, but only partially; they remain incomplete for the
time being.

The numerical methods used in this code are described in the following PhD
dissertation:

> J. Hansel. *Application of the Entropy Viscosity Method and the Flux-Corrected
> Transport Algorithm to Scalar Transport Equations and the Shallow Water
> Equations*. Texas A&M University, 2016.

These methods include the entropy viscosity method introduced in the following
paper:

> J.-L. Guermond et al. *Entropy Viscosity Method for Nonlinear Conservation
> Laws*. Journal of Computational Physics, 2011, 230, pp. 4248-4267.

and the Flux-Corrected Transport algorithm, which is described in the following
text:

> D. Kuzmin et al. *Flux-Corrected Transport*. Springer-Verlag Berlin Heidelberg,
> 2005.

This code employs the highly-scalable C++ finite element library \c deal.II:

> W. Bangerth et al. *deal.II - a General Purpose Object Oriented Finite Element
> Library*. ACM Transactions on Mathematical Software, 2007, 33.

<!----------------------------------------------------------------------------->
\section directory_structure_sec Directory Structure
<!----------------------------------------------------------------------------->

This directory is organized as follows:
Directory      | Description
---------------|------------
\c bin         | Contains useful bash and perl scripts
\c include     | Contains header files
\c input       | Contains run parameter files
\c mesh        | Contains mesh input files
\c plotscripts | Contains \c gnuplot plot scripts
\c problems    | Contains test problem description files
\c src         | Contains source files
\c templates   | Contains templates for creating new classes
\c tests       | Contains files for \c ctest unit/regression tests

Additional directories that are generated include the following:
Directory      | Description
---------------|------------
\c CMakeFiles  | Contains files generated by \c cmake
\c doxygen     | Contains \c doxygen output
\c output      | Contains output files
\c Testing     | Contains files generated by \c ctest

<!----------------------------------------------------------------------------->
\section code_structure_sec Code Structure
<!----------------------------------------------------------------------------->

\subsection main_sec Main

The main file is <tt>./main.cc</tt>. The following occurs in this file:
-# A parameters class is instantiated.
-# Run parameters are read from the appropriate input file.
-# The appropriate conservation law class is instantiated with the given
   run parameters.
-# The conservation law problem is run.

The same main file is used for all conservation laws; usage of the corresponding
conservation-law-specific classes is achieved through the usage of a
preprocessor branch using a flag that is set in the \c CMakeLists.txt file.
This \c CMake file creates several different executables: serial and parallel
versions of the executables for each conservation law.

Parallelization is currently incomplete. Some of the infrastructure has already
been added in the code; where serial and parallel programs differ, a preprocessor
branch is used to distinguish the differing code. This preprocessor branch
operates on a flag provided by the \c CMake file. With this approach, the serial
and parallel programs will use the same header and source files.

Each conservation law has its own run parameters class, derived from the
\link ConservationLawParameters \endlink class, as well as its own class
for running problems, which is derived from the \link ConservationLaw \endlink
class.

\subsection input_sec Input

Run parameter files are located in the <tt>./input/</tt> directory.
These parameters describe the mesh size, time step size, time discretization,
regularization scheme, etc.
Each conservation law has its own run parameter file in this directory.

Problem parameter files, which describe test problems, are located in
the <tt>./problems/</tt> directory. These parameters describe the physical
domain, initial conditions, etc.

\subsection output_sec Output

Output files will be created in a subdirectory of the <tt>./output/</tt>
directory, with a name corresponding to the name of the test problem
given in the input file. Depending on the options chosen in the output
section of the run parameters file, different output will be generated.

\subsection body_sec Body

The bulk of the code is in the \link ConservationLaw \endlink class.
This class provides the following main methods:
- \c initialize_system(): initializes objects such as the degree of
  freedom handler and reads in problem parameters.
- \c setup_system(): resizes objects for a particular refinement cycle.
- \c run(): calls \c initialize_system() and loops over refinement cycles.
- \c solve_runge_kutta(): solves a transient using an SSPRK method.

*/
