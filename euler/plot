#!/usr/bin/env perl
#
# Calls the plot_detailed plot script with command-line arguments inferred
# from the TARGET in CMakeLists.txt and the options in the appropriate input file.
#
# USAGE: plot

use strict;

# read CMakeLists to determine which conservation law executable was last used
#================================================================================
# initialize search arrays
my $found_TARGET = 0;
my $TARGET;

# read input file for search strings
open(CMAKELISTS, '<', "CMakeLists.txt");
while (my $line = <CMAKELISTS>)
{
  if ($line =~ /SET\(TARGET/)
  {
    my @TARGET_fields1 = split /\s+/, $line;
    my @TARGET_fields2 = split /"/, $TARGET_fields1[1];
    $TARGET = $TARGET_fields2[1];
    $found_TARGET = 1;
    last;
  }
}
if (not $found_TARGET)
{
  die "TARGET was not found in CMakeLists.txt\n";
}

# read appropriate input file to find the necessary input parameters
#================================================================================

# search variables
my @search_strings = ("set runge kutta method");
my @search_values;
my @search_flags;
for (my $i = 0; $i <= $#search_strings; $i++) {
  push(@search_values,"");
  push(@search_flags,0);
}

# read input file to determine the test problem ID and time integrator
my $in_problem_ID_section = 0;
my %problem_names;
my $problem_ID;
my $problem_ID_found = 0;
my $time_discretization;
my $time_discretization_found = 0;

open(IN, '<', "input_$TARGET") or die $!;
while (<IN>)
{
  # get line
  my $line = $_;

  # remove newline character from line
  chomp($line);

  # add to problem ID hash if in problem ID section
  if ($in_problem_ID_section)
  {
    # remove flag if no longer in problem ID section
    if ($line !~ /^# \d/)
    {
      $in_problem_ID_section = 0;
    }
    # add to problem ID hash
    else
    {
      my @problem_ID_fields = split /\s+/, $line;
      $problem_names{$problem_ID_fields[1]} = $problem_ID_fields[2];
    }
  }

  # add flag if entering problem ID section
  if ($line =~ /# Problem IDs:/)
  {
    $in_problem_ID_section = 1;
  }

  # check for problem ID field
  if ($line =~ /set problem id/)
  {
    my @fields = split /\s+=\s+/, $line;
    $problem_ID = $fields[1];
    $problem_ID_found = 1;
  }

  # check for time discretization field
  if ($line =~ /set runge kutta method/)
  {
    my @fields = split /\s+=\s+/, $line;
    $time_discretization = $fields[1];
    $time_discretization_found = 1;
  }
}

# check that all fields were found
if (not($problem_ID_found and $time_discretization_found))
{
  die "Did not find all required input fields\n";
}

# get problem name from hash
my $problem_name = $problem_names{$problem_ID};

# call plot script
system("plot_explicit $TARGET $problem_name $time_discretization sol");
