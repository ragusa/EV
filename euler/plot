#!/usr/bin/env perl
#
# Calls the plot_detailed plot script with command-line arguments inferred
# from the options in the appropriate input file.
#
# USAGE: $ plot
#
#        OR
#
#        $ plot <conservation law>
#
#        where <conservation law> is "burgers", "euler", or "shallowwater".
#        In the first usage, a default parameter for <conservation law> is used;
#        This is determined by the variable $default_conservation_law, set below.

use strict;

# default conservation law to be plotted (see USAGE)
my $default_conservation_law = "shallowwater";

# determine the conservation law; if not provided as a command-line argument,
# then use the default conservation law
my $n_arguments = @ARGV;
my $conservation_law;
if ($n_arguments < 1)
{
   $conservation_law = $default_conservation_law;
}
else
{
   $conservation_law = $ARGV[0];
}

# read appropriate input file to find the necessary input parameters
#================================================================================

# search variables
my @search_strings = ("set runge kutta method");
my @search_values;
my @search_flags;
for (my $i = 0; $i <= $#search_strings; $i++) {
  push(@search_values,"");
  push(@search_flags,0);
}

# read input file to determine the test problem ID and time integrator
my $in_problem_ID_section = 0;
my %problem_names;
my $problem_ID;
my $problem_ID_found = 0;
my $time_discretization;
my $time_discretization_found = 0;

open(IN, '<', "input_$conservation_law") or die $!;
while (<IN>)
{
  # get line
  my $line = $_;

  # remove newline character from line
  chomp($line);

  # add to problem ID hash if in problem ID section
  if ($in_problem_ID_section)
  {
    # remove flag if no longer in problem ID section
    if ($line !~ /^# \d/)
    {
      $in_problem_ID_section = 0;
    }
    # add to problem ID hash
    else
    {
      my @problem_ID_fields = split /\s+/, $line;
      $problem_names{$problem_ID_fields[1]} = $problem_ID_fields[2];
    }
  }

  # add flag if entering problem ID section
  if ($line =~ /# Problem IDs:/)
  {
    $in_problem_ID_section = 1;
  }

  # check for problem ID field
  if ($line =~ /set problem id/)
  {
    my @fields = split /\s+=\s+/, $line;
    $problem_ID = $fields[1];
    $problem_ID_found = 1;
  }

  # check for time discretization field
  if ($line =~ /set runge kutta method/)
  {
    my @fields = split /\s+=\s+/, $line;
    $time_discretization = $fields[1];
    $time_discretization_found = 1;
  }
}

# check that all fields were found
if (not($problem_ID_found and $time_discretization_found))
{
  die "Did not find all required input fields\n";
}

# get problem name from hash
my $problem_name = $problem_names{$problem_ID};

# call plot script
system("plot_explicit $conservation_law $problem_name $time_discretization sol");
