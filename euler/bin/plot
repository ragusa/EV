#!/usr/bin/env perl
#
# Calls the plot_detailed plot script with command-line arguments inferred
# from the options in the appropriate input file.
#
# USAGE: $ plot [conservation law] [type]
#
#        OR
#
#        $ plot [type] [conservation law]
#
#        where
#          [conservation law]: burgers|euler|shallowwater
#          [type]:             sol|conv|visc
#
#        If no conservation law is given, then the conservation law is
#        determined by the variable $default_conservation_law, set below.

use strict;

# default conservation law to be plotted (see USAGE)
my $default_conservation_law = "shallowwater";

# determine the conservation law; if not provided as a command-line argument,
# then use the default conservation law
my $n_arguments = @ARGV;
my $conservation_law;
my $type;

my %arg_identity = (
  "sol" => "type",
  "visc" => "type",
  "burgers" => "conservationlaw",
  "euler" => "conservationlaw",
  "shallowwater" => "conservationlaw"
);

my $found_conservationlaw = 0;
my $found_type = 0;
for (my $i = 0; $i < $n_arguments; $i++)
{
  my $arg = $ARGV[$i];
  my $identity = $arg_identity{$arg};
  if ($identity eq "conservationlaw")
  {
    $conservation_law = $arg;
    $found_conservationlaw = 1;
  }
  elsif ($identity eq "type")
  {
    $type = $arg;
    $found_type = 1;
  }
  else
  {
    die "Invalid command-line argument."
  }
}

if (not $found_conservationlaw)
{
  $conservation_law = $default_conservation_law;
}

if (not $found_type)
{
  $type = "sol";
}

# read appropriate input file to find the necessary input parameters
#================================================================================

# search variables
my @search_strings = ("set runge kutta method");
my @search_values;
my @search_flags;
for (my $i = 0; $i <= $#search_strings; $i++) {
  push(@search_values,"");
  push(@search_flags,0);
}

# read input file to determine the test problem ID and time integrator
my $problem_name;
my $problem_name_found = 0;
my $time_discretization;
my $time_discretization_found = 0;

open(IN, '<', "input/$conservation_law.prm") or die $!;
while (<IN>)
{
  # get line
  my $line = $_;

  # remove newline character from line
  chomp($line);

  # check for problem ID field
  if ($line =~ /set problem name/)
  {
    my @fields = split /\s+=\s+/, $line;
    $problem_name = $fields[1];
    $problem_name_found = 1;
  }

  # check for time discretization field
  if ($line =~ /set runge kutta method/)
  {
    my @fields = split /\s+=\s+/, $line;
    $time_discretization = $fields[1];
    $time_discretization_found = 1;
  }
}

# check that all fields were found
if (not($problem_name_found and $time_discretization_found))
{
  die "Did not find all required input fields\n";
}

# call plot script
my $function_call = "plot_explicit $conservation_law $problem_name ".
  "$time_discretization $type";
system($function_call);
